// <auto-generated />
using System;
using DataAccessLibrary.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccessLibrary.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240414110057_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BeerGroupModelBeerLoverModel", b =>
                {
                    b.Property<Guid>("BeerGroupsBeerGroupID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupMembersBeerLoverID")
                        .HasColumnType("uuid");

                    b.HasKey("BeerGroupsBeerGroupID", "GroupMembersBeerLoverID");

                    b.HasIndex("GroupMembersBeerLoverID");

                    b.ToTable("BeerGroupModelBeerLoverModel");
                });

            modelBuilder.Entity("ModelLibrary.BeerGroupModel", b =>
                {
                    b.Property<Guid>("BeerGroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("GroupImage")
                        .HasColumnType("bytea");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BeerGroupID");

                    b.ToTable("BEERGROUPS");

                    b.HasData(
                        new
                        {
                            BeerGroupID = new Guid("85b6e4da-a3b1-47f7-8d6f-fd6c5a30f4bf"),
                            GroupName = "Craft Beer Enthusiasts"
                        },
                        new
                        {
                            BeerGroupID = new Guid("5774303f-27b5-464c-a107-e278eb5a9b86"),
                            GroupName = "Ale Beer Enthusiasts"
                        },
                        new
                        {
                            BeerGroupID = new Guid("02591354-80d4-4fdd-82ec-a3c5f1ba363b"),
                            GroupName = "Stout Beer Enthusiasts"
                        },
                        new
                        {
                            BeerGroupID = new Guid("d739ec83-d624-4659-8ca9-a5e974e9e5f0"),
                            GroupName = "Test Beer Enthusiasts"
                        },
                        new
                        {
                            BeerGroupID = new Guid("6a8a1dfc-e83e-45e6-87c1-f3dbf782e41f"),
                            GroupName = "New Beer Enthusiasts"
                        },
                        new
                        {
                            BeerGroupID = new Guid("981abd86-3f97-495a-abaa-c79529f94881"),
                            GroupName = "IPA Beer Enthusiasts"
                        });
                });

            modelBuilder.Entity("ModelLibrary.BeerLoverModel", b =>
                {
                    b.Property<Guid>("BeerLoverID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BeerLoverEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BeerLoverName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("ProfilePic")
                        .HasColumnType("bytea");

                    b.HasKey("BeerLoverID");

                    b.ToTable("BEERLOVERS");

                    b.HasData(
                        new
                        {
                            BeerLoverID = new Guid("8b4b664d-2325-4d8a-a340-f8deb5d1c463"),
                            BeerLoverEmail = "john@example.com",
                            BeerLoverName = "John Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("d05ff43d-408c-4777-85c5-68d2defd0070"),
                            BeerLoverEmail = "Pop@example.com",
                            BeerLoverName = "Pop Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("e9c9acbd-45a1-4da9-8ca8-85462cb66241"),
                            BeerLoverEmail = "Joson@example.com",
                            BeerLoverName = "Joson Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("9928cfe4-c2e0-4463-8e8d-1c7a5e275ff0"),
                            BeerLoverEmail = "Jason@example.com",
                            BeerLoverName = "Jason Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("7e533e81-2a89-4e6c-9678-39853bef209e"),
                            BeerLoverEmail = "Casper@example.com",
                            BeerLoverName = "Casper Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("74c52131-8ac3-4923-8cff-cbc5859f6c14"),
                            BeerLoverEmail = "Peter@example.com",
                            BeerLoverName = "Peter Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("ea1da600-e9b2-49f3-b1a2-fa8a879c993d"),
                            BeerLoverEmail = "Dask@example.com",
                            BeerLoverName = "Dask Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("bbbbddcd-4307-486c-bc19-2019a3a98deb"),
                            BeerLoverEmail = "Lope@example.com",
                            BeerLoverName = "Lope Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("de9c0d03-767a-47e4-8bf7-a5b558bb7478"),
                            BeerLoverEmail = "Gope@example.com",
                            BeerLoverName = "Gope Doe"
                        });
                });

            modelBuilder.Entity("ModelLibrary.BeerModel", b =>
                {
                    b.Property<Guid>("BeerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AleSubType")
                        .HasColumnType("integer");

                    b.Property<byte[]>("BeerImage")
                        .HasColumnType("bytea");

                    b.Property<Guid?>("BeerLoverModelBeerLoverID")
                        .HasColumnType("uuid");

                    b.Property<string>("BeerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("BeerType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("BreweryID")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("LagerSubType")
                        .HasColumnType("integer");

                    b.Property<int?>("SpecialtyHybridSubType")
                        .HasColumnType("integer");

                    b.Property<int?>("StrongAleSubType")
                        .HasColumnType("integer");

                    b.HasKey("BeerID");

                    b.HasIndex("BeerLoverModelBeerLoverID");

                    b.HasIndex("BreweryID");

                    b.ToTable("BEERS");

                    b.HasData(
                        new
                        {
                            BeerID = new Guid("1c6bc689-cd71-436b-9f11-88dcc5617790"),
                            AleSubType = 0,
                            BeerName = "Geuss new",
                            BeerType = 0,
                            Description = ""
                        },
                        new
                        {
                            BeerID = new Guid("6c5d0208-d2ff-472e-9b35-1b857f61fa02"),
                            AleSubType = 1,
                            BeerName = "IPA london",
                            BeerType = 0,
                            Description = ""
                        },
                        new
                        {
                            BeerID = new Guid("477feaf9-3c7f-47ee-abbd-dfa7435c55e0"),
                            BeerName = "Grimberger double amber",
                            BeerType = 1,
                            Description = "",
                            LagerSubType = 3
                        },
                        new
                        {
                            BeerID = new Guid("c918a343-a9af-46d8-876e-1c62b2221d75"),
                            BeerName = "Anakisten bluberry",
                            BeerType = 2,
                            Description = "",
                            SpecialtyHybridSubType = 0
                        },
                        new
                        {
                            BeerID = new Guid("dc778984-e9f7-402a-9b19-766b304fdebd"),
                            BeerName = "Trapist lakrids",
                            BeerType = 3,
                            Description = "",
                            StrongAleSubType = 0
                        },
                        new
                        {
                            BeerID = new Guid("3a0172bb-fc3c-4e7c-9fff-46db54752cef"),
                            BeerName = "Carlsberg pilsner",
                            BeerType = 1,
                            Description = "",
                            LagerSubType = 0
                        });
                });

            modelBuilder.Entity("ModelLibrary.BreweryModel", b =>
                {
                    b.Property<Guid>("BreweryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BeerLoverModelBeerLoverID")
                        .HasColumnType("uuid");

                    b.Property<string>("BreweryAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BreweryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.HasKey("BreweryID");

                    b.HasIndex("BeerLoverModelBeerLoverID");

                    b.ToTable("BREWERIES");

                    b.HasData(
                        new
                        {
                            BreweryID = new Guid("9d1ab566-4529-4baa-b0d2-2672be17a68c"),
                            BreweryAddress = "9838 Østrebro København SW",
                            BreweryName = "Carlsberg",
                            Country = "DK"
                        },
                        new
                        {
                            BreweryID = new Guid("3b5ce26a-5cb4-48be-8ced-189186736f37"),
                            BreweryAddress = "9838 Vestrebro København NW",
                            BreweryName = "Tuborg",
                            Country = "DK"
                        },
                        new
                        {
                            BreweryID = new Guid("70326e49-102e-4029-8879-6f69879fb56b"),
                            BreweryAddress = "9090 Brussels NW",
                            BreweryName = "Leffe",
                            Country = "BL"
                        });
                });

            modelBuilder.Entity("ModelLibrary.RatingModel", b =>
                {
                    b.Property<Guid>("RatingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BeerID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RatingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("RatingScore")
                        .HasColumnType("double precision");

                    b.Property<string>("Review")
                        .HasColumnType("text");

                    b.Property<Guid>("TasterBeerLoverID")
                        .HasColumnType("uuid");

                    b.HasKey("RatingID");

                    b.HasIndex("BeerID");

                    b.HasIndex("TasterBeerLoverID");

                    b.ToTable("RATINGS");
                });

            modelBuilder.Entity("BeerGroupModelBeerLoverModel", b =>
                {
                    b.HasOne("ModelLibrary.BeerGroupModel", null)
                        .WithMany()
                        .HasForeignKey("BeerGroupsBeerGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelLibrary.BeerLoverModel", null)
                        .WithMany()
                        .HasForeignKey("GroupMembersBeerLoverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModelLibrary.BeerModel", b =>
                {
                    b.HasOne("ModelLibrary.BeerLoverModel", null)
                        .WithMany("FavoritBeers")
                        .HasForeignKey("BeerLoverModelBeerLoverID");

                    b.HasOne("ModelLibrary.BreweryModel", "Brewery")
                        .WithMany("ProducedBeers")
                        .HasForeignKey("BreweryID");

                    b.Navigation("Brewery");
                });

            modelBuilder.Entity("ModelLibrary.BreweryModel", b =>
                {
                    b.HasOne("ModelLibrary.BeerLoverModel", null)
                        .WithMany("FavoriteBreweries")
                        .HasForeignKey("BeerLoverModelBeerLoverID");
                });

            modelBuilder.Entity("ModelLibrary.RatingModel", b =>
                {
                    b.HasOne("ModelLibrary.BeerModel", "Beer")
                        .WithMany("Ratings")
                        .HasForeignKey("BeerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelLibrary.BeerLoverModel", "Taster")
                        .WithMany("Ratings")
                        .HasForeignKey("TasterBeerLoverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beer");

                    b.Navigation("Taster");
                });

            modelBuilder.Entity("ModelLibrary.BeerLoverModel", b =>
                {
                    b.Navigation("FavoritBeers");

                    b.Navigation("FavoriteBreweries");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("ModelLibrary.BeerModel", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("ModelLibrary.BreweryModel", b =>
                {
                    b.Navigation("ProducedBeers");
                });
#pragma warning restore 612, 618
        }
    }
}
