// <auto-generated />
using System;
using DataAccessLibrary.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccessLibrary.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231205135259_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BeerGroupModelBeerLoverModel", b =>
                {
                    b.Property<Guid>("BeerGroupsBeerGroupID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupMembersBeerLoverID")
                        .HasColumnType("uuid");

                    b.HasKey("BeerGroupsBeerGroupID", "GroupMembersBeerLoverID");

                    b.HasIndex("GroupMembersBeerLoverID");

                    b.ToTable("BeerGroupModelBeerLoverModel");
                });

            modelBuilder.Entity("ModelLibrary.BeerGroupModel", b =>
                {
                    b.Property<Guid>("BeerGroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BeerGroupID");

                    b.ToTable("BEERGROUPS");

                    b.HasData(
                        new
                        {
                            BeerGroupID = new Guid("924f2e6d-9b35-42b4-b0ca-fcb8e68661e8"),
                            GroupName = "Craft Beer Enthusiasts"
                        },
                        new
                        {
                            BeerGroupID = new Guid("ce12aacb-2102-4932-8398-b9a48a05f3f0"),
                            GroupName = "Ale Beer Enthusiasts"
                        },
                        new
                        {
                            BeerGroupID = new Guid("9a1e9eb5-cbe0-45ab-92b2-abc11d47a3cf"),
                            GroupName = "Stout Beer Enthusiasts"
                        },
                        new
                        {
                            BeerGroupID = new Guid("cc59d1dc-a80b-41b1-bbc7-07a2ed37b9e9"),
                            GroupName = "Test Beer Enthusiasts"
                        },
                        new
                        {
                            BeerGroupID = new Guid("5035ab47-01e7-421d-8005-e6d88d68aed0"),
                            GroupName = "New Beer Enthusiasts"
                        },
                        new
                        {
                            BeerGroupID = new Guid("c462541f-74e9-4e14-b9c0-6cdc21d29719"),
                            GroupName = "IPA Beer Enthusiasts"
                        });
                });

            modelBuilder.Entity("ModelLibrary.BeerLoverModel", b =>
                {
                    b.Property<Guid>("BeerLoverID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BeerLoverEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BeerLoverName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BeerLoverID");

                    b.ToTable("BEERLOVERS");

                    b.HasData(
                        new
                        {
                            BeerLoverID = new Guid("e59b2ef2-69f8-4d47-a816-3fdb0b37a8fb"),
                            BeerLoverEmail = "john@example.com",
                            BeerLoverName = "John Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("fe423505-e0f7-430a-9077-679f2ccd9285"),
                            BeerLoverEmail = "Pop@example.com",
                            BeerLoverName = "Pop Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("f13df107-dd13-404a-b18d-71c1bee80550"),
                            BeerLoverEmail = "Joson@example.com",
                            BeerLoverName = "Joson Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("f4defc90-860b-4d6f-8136-bb23aab7b536"),
                            BeerLoverEmail = "Jason@example.com",
                            BeerLoverName = "Jason Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("78f6180b-cf2d-4c4f-8173-404848c5058d"),
                            BeerLoverEmail = "Casper@example.com",
                            BeerLoverName = "Casper Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("d4935d0d-4c56-405e-b917-29d79695a4c7"),
                            BeerLoverEmail = "Peter@example.com",
                            BeerLoverName = "Peter Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("285d9d65-92a4-4df8-97d8-b547cc0f4ae8"),
                            BeerLoverEmail = "Dask@example.com",
                            BeerLoverName = "Dask Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("6e2ae9f4-440b-49d0-acd3-2f9eb62657d0"),
                            BeerLoverEmail = "Lope@example.com",
                            BeerLoverName = "Lope Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("dc63d46e-6aed-42d5-a1a5-a454c46b6d7c"),
                            BeerLoverEmail = "Gope@example.com",
                            BeerLoverName = "Gope Doe"
                        });
                });

            modelBuilder.Entity("ModelLibrary.BeerModel", b =>
                {
                    b.Property<Guid>("BeerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AleSubType")
                        .HasColumnType("integer");

                    b.Property<string>("BeerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("BeerType")
                        .HasColumnType("integer");

                    b.Property<string>("Brewery")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("LagerSubType")
                        .HasColumnType("integer");

                    b.Property<int?>("SpecialtyHybridSubType")
                        .HasColumnType("integer");

                    b.Property<int?>("StrongAleSubType")
                        .HasColumnType("integer");

                    b.HasKey("BeerID");

                    b.ToTable("BEERS");

                    b.HasData(
                        new
                        {
                            BeerID = new Guid("8098c989-62c2-40e8-a856-b325fe7d65f8"),
                            AleSubType = 0,
                            BeerName = "Geuss new",
                            BeerType = 0,
                            Brewery = "Geuss Brewery"
                        },
                        new
                        {
                            BeerID = new Guid("603fc4ce-0083-442b-ad4f-bafd5de4773a"),
                            AleSubType = 1,
                            BeerName = "IPA london",
                            BeerType = 0,
                            Brewery = "London Brewing Co"
                        },
                        new
                        {
                            BeerID = new Guid("5ba39c0c-d3e6-42b9-820a-2e2afcc83309"),
                            BeerName = "Grimberger double amber",
                            BeerType = 1,
                            Brewery = "Grimberger Brewery",
                            LagerSubType = 3
                        },
                        new
                        {
                            BeerID = new Guid("712d58ea-f1c7-4edf-9233-b63769380c09"),
                            BeerName = "Anakisten bluberry",
                            BeerType = 2,
                            Brewery = "Anakisten Brewing",
                            SpecialtyHybridSubType = 0
                        },
                        new
                        {
                            BeerID = new Guid("a26c6d32-3120-435f-8e5f-7a19ca290568"),
                            BeerName = "Trapist lakrids",
                            BeerType = 3,
                            Brewery = "Trapist Brews",
                            StrongAleSubType = 0
                        },
                        new
                        {
                            BeerID = new Guid("07470cef-a99b-4c28-9b9b-67977dc4aff6"),
                            BeerName = "Carlsberg pilsner",
                            BeerType = 1,
                            Brewery = "Carlsberg Brewery",
                            LagerSubType = 0
                        });
                });

            modelBuilder.Entity("ModelLibrary.RatingModel", b =>
                {
                    b.Property<Guid>("RatingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BeerID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RatingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("RatingScore")
                        .HasColumnType("double precision");

                    b.Property<string>("Review")
                        .HasColumnType("text");

                    b.Property<Guid>("TasterBeerLoverID")
                        .HasColumnType("uuid");

                    b.HasKey("RatingID");

                    b.HasIndex("BeerID");

                    b.HasIndex("TasterBeerLoverID");

                    b.ToTable("RATINGS");
                });

            modelBuilder.Entity("BeerGroupModelBeerLoverModel", b =>
                {
                    b.HasOne("ModelLibrary.BeerGroupModel", null)
                        .WithMany()
                        .HasForeignKey("BeerGroupsBeerGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelLibrary.BeerLoverModel", null)
                        .WithMany()
                        .HasForeignKey("GroupMembersBeerLoverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModelLibrary.RatingModel", b =>
                {
                    b.HasOne("ModelLibrary.BeerModel", "Beer")
                        .WithMany("Ratings")
                        .HasForeignKey("BeerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelLibrary.BeerLoverModel", "Taster")
                        .WithMany("rating")
                        .HasForeignKey("TasterBeerLoverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beer");

                    b.Navigation("Taster");
                });

            modelBuilder.Entity("ModelLibrary.BeerLoverModel", b =>
                {
                    b.Navigation("rating");
                });

            modelBuilder.Entity("ModelLibrary.BeerModel", b =>
                {
                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
