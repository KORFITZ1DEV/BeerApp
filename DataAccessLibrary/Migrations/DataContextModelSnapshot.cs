// <auto-generated />
using System;
using DataAccessLibrary.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccessLibrary.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BeerGroupModelBeerLoverModel", b =>
                {
                    b.Property<Guid>("BeerGroupsBeerGroupID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupMembersBeerLoverID")
                        .HasColumnType("uuid");

                    b.HasKey("BeerGroupsBeerGroupID", "GroupMembersBeerLoverID");

                    b.HasIndex("GroupMembersBeerLoverID");

                    b.ToTable("BeerGroupModelBeerLoverModel");
                });

            modelBuilder.Entity("ModelLibrary.BeerGroupModel", b =>
                {
                    b.Property<Guid>("BeerGroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BeerGroupID");

                    b.ToTable("BEERGROUPS");

                    b.HasData(
                        new
                        {
                            BeerGroupID = new Guid("fa655159-07e9-42a0-9655-5fef0ec31283"),
                            GroupName = "Craft Beer Enthusiasts"
                        },
                        new
                        {
                            BeerGroupID = new Guid("71e9a6a6-877a-44c5-a6df-681241dbab19"),
                            GroupName = "Ale Beer Enthusiasts"
                        },
                        new
                        {
                            BeerGroupID = new Guid("e11d2561-fb66-4a18-93be-ec122b0fd9d4"),
                            GroupName = "Stout Beer Enthusiasts"
                        },
                        new
                        {
                            BeerGroupID = new Guid("efc393c7-063a-4595-bfa0-a819f1adcc09"),
                            GroupName = "Test Beer Enthusiasts"
                        },
                        new
                        {
                            BeerGroupID = new Guid("43393fb3-c80a-47e0-a3be-dda7632073b4"),
                            GroupName = "New Beer Enthusiasts"
                        },
                        new
                        {
                            BeerGroupID = new Guid("75b04c6c-22e0-41de-93ee-dd02b374237e"),
                            GroupName = "IPA Beer Enthusiasts"
                        });
                });

            modelBuilder.Entity("ModelLibrary.BeerLoverModel", b =>
                {
                    b.Property<Guid>("BeerLoverID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BeerLoverEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BeerLoverName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BeerLoverID");

                    b.ToTable("BEERLOVERS");

                    b.HasData(
                        new
                        {
                            BeerLoverID = new Guid("b35752b1-ecb1-491b-8a37-ff1c4b7a9e9e"),
                            BeerLoverEmail = "john@example.com",
                            BeerLoverName = "John Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("321e4734-7b8b-4d95-8aa6-a960a941bbdb"),
                            BeerLoverEmail = "Pop@example.com",
                            BeerLoverName = "Pop Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("ec5cff0e-5df6-429d-a177-4b9528a528d1"),
                            BeerLoverEmail = "Joson@example.com",
                            BeerLoverName = "Joson Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("d187fb0b-0061-4722-8949-a2b4851a68f8"),
                            BeerLoverEmail = "Jason@example.com",
                            BeerLoverName = "Jason Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("d7468fb6-3f09-4319-86c8-da727647456f"),
                            BeerLoverEmail = "Casper@example.com",
                            BeerLoverName = "Casper Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("359a75b7-497c-4476-a2a2-7aa2d04d8bdc"),
                            BeerLoverEmail = "Peter@example.com",
                            BeerLoverName = "Peter Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("8b454255-f001-4d6a-951b-2856b1a58a57"),
                            BeerLoverEmail = "Dask@example.com",
                            BeerLoverName = "Dask Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("67b79d6e-1aa0-4829-bc20-5c3dd16e6316"),
                            BeerLoverEmail = "Lope@example.com",
                            BeerLoverName = "Lope Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("6078963c-ef07-4ef8-9031-0ce84011c595"),
                            BeerLoverEmail = "Gope@example.com",
                            BeerLoverName = "Gope Doe"
                        });
                });

            modelBuilder.Entity("ModelLibrary.BeerModel", b =>
                {
                    b.Property<Guid>("BeerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AleSubType")
                        .HasColumnType("integer");

                    b.Property<string>("BeerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("BeerType")
                        .HasColumnType("integer");

                    b.Property<string>("Brewery")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("LagerSubType")
                        .HasColumnType("integer");

                    b.Property<int?>("SpecialtyHybridSubType")
                        .HasColumnType("integer");

                    b.Property<int?>("StrongAleSubType")
                        .HasColumnType("integer");

                    b.HasKey("BeerID");

                    b.ToTable("BEERS");

                    b.HasData(
                        new
                        {
                            BeerID = new Guid("374b135e-e8c4-429c-ba89-909e82d22056"),
                            AleSubType = 0,
                            BeerName = "Geuss new",
                            BeerType = 0,
                            Brewery = "Geuss Brewery"
                        },
                        new
                        {
                            BeerID = new Guid("7572a355-7aa7-43db-875a-79781ad1a537"),
                            AleSubType = 1,
                            BeerName = "IPA london",
                            BeerType = 0,
                            Brewery = "London Brewing Co"
                        },
                        new
                        {
                            BeerID = new Guid("0f356aa0-33d2-4f49-aa78-e7551c9f5da8"),
                            BeerName = "Grimberger double amber",
                            BeerType = 1,
                            Brewery = "Grimberger Brewery",
                            LagerSubType = 3
                        },
                        new
                        {
                            BeerID = new Guid("69d377c9-24dc-4189-ad24-d9f9461e3fd5"),
                            BeerName = "Anakisten bluberry",
                            BeerType = 2,
                            Brewery = "Anakisten Brewing",
                            SpecialtyHybridSubType = 0
                        },
                        new
                        {
                            BeerID = new Guid("5a6dbf58-e063-41d1-8865-572a5f88c300"),
                            BeerName = "Trapist lakrids",
                            BeerType = 3,
                            Brewery = "Trapist Brews",
                            StrongAleSubType = 0
                        },
                        new
                        {
                            BeerID = new Guid("351f4265-206f-418b-9729-0eb96daacec7"),
                            BeerName = "Carlsberg pilsner",
                            BeerType = 1,
                            Brewery = "Carlsberg Brewery",
                            LagerSubType = 0
                        });
                });

            modelBuilder.Entity("ModelLibrary.RatingModel", b =>
                {
                    b.Property<Guid>("RatingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BeerID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RatingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("RatingScore")
                        .HasColumnType("double precision");

                    b.Property<string>("Review")
                        .HasColumnType("text");

                    b.Property<Guid>("TasterBeerLoverID")
                        .HasColumnType("uuid");

                    b.HasKey("RatingID");

                    b.HasIndex("BeerID");

                    b.HasIndex("TasterBeerLoverID");

                    b.ToTable("RATINGS");
                });

            modelBuilder.Entity("BeerGroupModelBeerLoverModel", b =>
                {
                    b.HasOne("ModelLibrary.BeerGroupModel", null)
                        .WithMany()
                        .HasForeignKey("BeerGroupsBeerGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelLibrary.BeerLoverModel", null)
                        .WithMany()
                        .HasForeignKey("GroupMembersBeerLoverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModelLibrary.RatingModel", b =>
                {
                    b.HasOne("ModelLibrary.BeerModel", "Beer")
                        .WithMany("Ratings")
                        .HasForeignKey("BeerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelLibrary.BeerLoverModel", "Taster")
                        .WithMany("rating")
                        .HasForeignKey("TasterBeerLoverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beer");

                    b.Navigation("Taster");
                });

            modelBuilder.Entity("ModelLibrary.BeerLoverModel", b =>
                {
                    b.Navigation("rating");
                });

            modelBuilder.Entity("ModelLibrary.BeerModel", b =>
                {
                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
