// <auto-generated />
using System;
using DataAccessLibrary.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccessLibrary.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BeerGroupModelBeerLoverModel", b =>
                {
                    b.Property<Guid>("BeerGroupsBeerGroupID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupMembersBeerLoverID")
                        .HasColumnType("uuid");

                    b.HasKey("BeerGroupsBeerGroupID", "GroupMembersBeerLoverID");

                    b.HasIndex("GroupMembersBeerLoverID");

                    b.ToTable("BeerGroupModelBeerLoverModel");
                });

            modelBuilder.Entity("ModelLibrary.BeerGroupModel", b =>
                {
                    b.Property<Guid>("BeerGroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BeerGroupID");

                    b.ToTable("BEERGROUPS");

                    b.HasData(
                        new
                        {
                            BeerGroupID = new Guid("6e9e20a6-6ae4-497e-81e4-0bb5a41fc1e9"),
                            GroupName = "Craft Beer Enthusiasts"
                        },
                        new
                        {
                            BeerGroupID = new Guid("eac27345-715f-48e3-97cf-2f2658475205"),
                            GroupName = "Ale Beer Enthusiasts"
                        },
                        new
                        {
                            BeerGroupID = new Guid("3e7b2959-ee1e-40c8-a173-eb930deaedc6"),
                            GroupName = "Stout Beer Enthusiasts"
                        },
                        new
                        {
                            BeerGroupID = new Guid("4041008e-ee42-404d-873f-7c51825c37fa"),
                            GroupName = "Test Beer Enthusiasts"
                        },
                        new
                        {
                            BeerGroupID = new Guid("dfa2eda8-361b-4fc7-9c6a-6cac9c32215e"),
                            GroupName = "New Beer Enthusiasts"
                        },
                        new
                        {
                            BeerGroupID = new Guid("5cbc2eac-498b-4745-adda-50450e80c5ed"),
                            GroupName = "IPA Beer Enthusiasts"
                        });
                });

            modelBuilder.Entity("ModelLibrary.BeerLoverModel", b =>
                {
                    b.Property<Guid>("BeerLoverID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BeerLoverEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BeerLoverName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BeerLoverID");

                    b.ToTable("BEERLOVERS");

                    b.HasData(
                        new
                        {
                            BeerLoverID = new Guid("875c9a48-9df9-4553-a5a6-d709c673cb69"),
                            BeerLoverEmail = "john@example.com",
                            BeerLoverName = "John Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("ed3768c1-6053-4a7c-855f-5d9b634a70df"),
                            BeerLoverEmail = "Pop@example.com",
                            BeerLoverName = "Pop Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("281a05e8-afa2-4d20-a077-384350caee20"),
                            BeerLoverEmail = "Joson@example.com",
                            BeerLoverName = "Joson Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("8c28cfe4-9c87-42bc-9eab-f2051e71aca6"),
                            BeerLoverEmail = "Jason@example.com",
                            BeerLoverName = "Jason Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("8a3bb6bc-d9cf-4198-8bce-2f9bc9948155"),
                            BeerLoverEmail = "Casper@example.com",
                            BeerLoverName = "Casper Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("a0f7363a-d51e-49c4-99af-9a46ebf7dda8"),
                            BeerLoverEmail = "Peter@example.com",
                            BeerLoverName = "Peter Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("b474dc2a-66d4-438a-b9ba-8bf58a9d187d"),
                            BeerLoverEmail = "Dask@example.com",
                            BeerLoverName = "Dask Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("f75c7350-03da-4e0c-8a35-950e21168799"),
                            BeerLoverEmail = "Lope@example.com",
                            BeerLoverName = "Lope Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("d47f52d1-ea5f-4557-abcb-31c57ed2b5c5"),
                            BeerLoverEmail = "Gope@example.com",
                            BeerLoverName = "Gope Doe"
                        });
                });

            modelBuilder.Entity("ModelLibrary.BeerModel", b =>
                {
                    b.Property<Guid>("BeerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AleSubType")
                        .HasColumnType("integer");

                    b.Property<string>("BeerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("BeerType")
                        .HasColumnType("integer");

                    b.Property<string>("Brewery")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("LagerSubType")
                        .HasColumnType("integer");

                    b.Property<int?>("SpecialtyHybridSubType")
                        .HasColumnType("integer");

                    b.Property<int?>("StrongAleSubType")
                        .HasColumnType("integer");

                    b.HasKey("BeerID");

                    b.ToTable("BEERS");

                    b.HasData(
                        new
                        {
                            BeerID = new Guid("17b75e7b-c621-4793-ba3e-45058f54fccf"),
                            AleSubType = 0,
                            BeerName = "Geuss new",
                            BeerType = 0,
                            Brewery = "Geuss Brewery"
                        },
                        new
                        {
                            BeerID = new Guid("7d0f6055-0f22-4ee1-b480-eeebd7dc7cd5"),
                            AleSubType = 1,
                            BeerName = "IPA london",
                            BeerType = 0,
                            Brewery = "London Brewing Co"
                        },
                        new
                        {
                            BeerID = new Guid("3b776763-921e-4174-94e9-9485a73a230c"),
                            BeerName = "Grimberger double amber",
                            BeerType = 1,
                            Brewery = "Grimberger Brewery",
                            LagerSubType = 3
                        },
                        new
                        {
                            BeerID = new Guid("f9a9833d-b2ef-412f-91ca-717755ff052b"),
                            BeerName = "Anakisten bluberry",
                            BeerType = 2,
                            Brewery = "Anakisten Brewing",
                            SpecialtyHybridSubType = 0
                        },
                        new
                        {
                            BeerID = new Guid("f2a9e081-edf8-4644-9e49-0a2c275576a0"),
                            BeerName = "Trapist lakrids",
                            BeerType = 3,
                            Brewery = "Trapist Brews",
                            StrongAleSubType = 0
                        },
                        new
                        {
                            BeerID = new Guid("ae54d8df-8b6a-48b7-bc4b-df11c166c5e3"),
                            BeerName = "Carlsberg pilsner",
                            BeerType = 1,
                            Brewery = "Carlsberg Brewery",
                            LagerSubType = 0
                        });
                });

            modelBuilder.Entity("ModelLibrary.RatingModel", b =>
                {
                    b.Property<Guid>("RatingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BeerID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RatingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("RatingScore")
                        .HasColumnType("double precision");

                    b.Property<string>("Review")
                        .HasColumnType("text");

                    b.Property<Guid>("TasterBeerLoverID")
                        .HasColumnType("uuid");

                    b.HasKey("RatingID");

                    b.HasIndex("BeerID");

                    b.HasIndex("TasterBeerLoverID");

                    b.ToTable("RATINGS");
                });

            modelBuilder.Entity("BeerGroupModelBeerLoverModel", b =>
                {
                    b.HasOne("ModelLibrary.BeerGroupModel", null)
                        .WithMany()
                        .HasForeignKey("BeerGroupsBeerGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelLibrary.BeerLoverModel", null)
                        .WithMany()
                        .HasForeignKey("GroupMembersBeerLoverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModelLibrary.RatingModel", b =>
                {
                    b.HasOne("ModelLibrary.BeerModel", "Beer")
                        .WithMany("Ratings")
                        .HasForeignKey("BeerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelLibrary.BeerLoverModel", "Taster")
                        .WithMany("rating")
                        .HasForeignKey("TasterBeerLoverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beer");

                    b.Navigation("Taster");
                });

            modelBuilder.Entity("ModelLibrary.BeerLoverModel", b =>
                {
                    b.Navigation("rating");
                });

            modelBuilder.Entity("ModelLibrary.BeerModel", b =>
                {
                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
