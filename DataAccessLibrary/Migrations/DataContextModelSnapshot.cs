// <auto-generated />
using System;
using DataAccessLibrary.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccessLibrary.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BeerGroupModelBeerLoverModel", b =>
                {
                    b.Property<Guid>("BeerGroupID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupMemberBeerLoverID")
                        .HasColumnType("uuid");

                    b.HasKey("BeerGroupID", "GroupMemberBeerLoverID");

                    b.HasIndex("GroupMemberBeerLoverID");

                    b.ToTable("BeerGroupModelBeerLoverModel");
                });

            modelBuilder.Entity("ModelLibrary.BeerGroupModel", b =>
                {
                    b.Property<Guid>("BeerGroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("GroupImage")
                        .HasColumnType("bytea");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BeerGroupID");

                    b.ToTable("BEERGROUPS");

                    b.HasData(
                        new
                        {
                            BeerGroupID = new Guid("8593a6a3-82e9-4ca2-9ce5-feecf1573097"),
                            GroupName = "Craft Beer Enthusiasts"
                        },
                        new
                        {
                            BeerGroupID = new Guid("f3f197dd-5025-4e3e-a2ca-10af3332961f"),
                            GroupName = "Ale Beer Enthusiasts"
                        },
                        new
                        {
                            BeerGroupID = new Guid("bd3f7423-9c8c-4ded-9b0e-abda515a06dc"),
                            GroupName = "Stout Beer Enthusiasts"
                        },
                        new
                        {
                            BeerGroupID = new Guid("c608a24e-23a6-4783-ab27-1b44b229d5ae"),
                            GroupName = "Test Beer Enthusiasts"
                        },
                        new
                        {
                            BeerGroupID = new Guid("91361e7d-8137-46b1-9178-865dc73fa7d4"),
                            GroupName = "New Beer Enthusiasts"
                        },
                        new
                        {
                            BeerGroupID = new Guid("c4b38b9a-6daa-42f4-a85c-b5efba4a82dd"),
                            GroupName = "IPA Beer Enthusiasts"
                        });
                });

            modelBuilder.Entity("ModelLibrary.BeerLoverModel", b =>
                {
                    b.Property<Guid>("BeerLoverID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BeerLoverEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BeerLoverName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("ProfilePic")
                        .HasColumnType("bytea");

                    b.HasKey("BeerLoverID");

                    b.ToTable("BEERLOVERS");

                    b.HasData(
                        new
                        {
                            BeerLoverID = new Guid("bd36a650-6390-4c20-bfc7-ea8634ce0ada"),
                            BeerLoverEmail = "john@example.com",
                            BeerLoverName = "John Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("a79b372b-3f19-4f8e-8261-d578a9434d3f"),
                            BeerLoverEmail = "Pop@example.com",
                            BeerLoverName = "Pop Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("e0c84540-c286-4037-81d9-f3c693827023"),
                            BeerLoverEmail = "Joson@example.com",
                            BeerLoverName = "Joson Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("038a6e76-1f26-4370-bc24-d578af2ce3c2"),
                            BeerLoverEmail = "Jason@example.com",
                            BeerLoverName = "Jason Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("3e16db90-c128-4e0f-9eb9-281dc2461b1c"),
                            BeerLoverEmail = "Casper@example.com",
                            BeerLoverName = "Casper Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("3727add4-f4f7-4cd9-96a3-5f3ce55b3618"),
                            BeerLoverEmail = "Peter@example.com",
                            BeerLoverName = "Peter Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("814bb73c-c33b-49df-bb32-b36626131c6b"),
                            BeerLoverEmail = "Dask@example.com",
                            BeerLoverName = "Dask Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("37161c1f-62d7-4258-a446-80de658ec92e"),
                            BeerLoverEmail = "Lope@example.com",
                            BeerLoverName = "Lope Doe"
                        },
                        new
                        {
                            BeerLoverID = new Guid("6ea640f4-b9bb-4ab6-80bf-90b9ef96f75c"),
                            BeerLoverEmail = "Gope@example.com",
                            BeerLoverName = "Gope Doe"
                        });
                });

            modelBuilder.Entity("ModelLibrary.BeerModel", b =>
                {
                    b.Property<Guid>("BeerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("BeerImage")
                        .HasColumnType("bytea");

                    b.Property<Guid?>("BeerLoverModelBeerLoverID")
                        .HasColumnType("uuid");

                    b.Property<string>("BeerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("BeerType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("BreweryID")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BeerID");

                    b.HasIndex("BeerLoverModelBeerLoverID");

                    b.HasIndex("BreweryID");

                    b.ToTable("BEERS");

                    b.HasData(
                        new
                        {
                            BeerID = new Guid("b07772bd-f6c9-425d-ab1d-c9394416720c"),
                            BeerName = "Carlsberg Pilsner",
                            BeerType = 0,
                            Description = "En klassisk dansk pilsner med en lys og forfriskende smag."
                        },
                        new
                        {
                            BeerID = new Guid("e59841c0-0e3d-4418-8b37-3be230ebebe3"),
                            BeerName = "Tuborg Classic",
                            BeerType = 0,
                            Description = "En dansk pilsner med en fyldig krop og en let humlet finish."
                        },
                        new
                        {
                            BeerID = new Guid("e630f9a5-deb3-4efc-a726-c28d96f4027f"),
                            BeerName = "Grimbergen Blonde",
                            BeerType = 2,
                            Description = "En belgisk ale med en gylden farve og en frugtagtig, krydret smag."
                        },
                        new
                        {
                            BeerID = new Guid("9f7a3b20-f17c-438b-a72c-40d683853b4f"),
                            BeerName = "Leffe Brune",
                            BeerType = 4,
                            Description = "En belgisk ale med en rødbrun farve og en fyldig smag af karamel og tørret frugt."
                        });
                });

            modelBuilder.Entity("ModelLibrary.BreweryModel", b =>
                {
                    b.Property<Guid>("BreweryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BeerLoverModelBeerLoverID")
                        .HasColumnType("uuid");

                    b.Property<string>("BreweryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BreweryID");

                    b.HasIndex("BeerLoverModelBeerLoverID");

                    b.ToTable("BREWERIES");

                    b.HasData(
                        new
                        {
                            BreweryID = new Guid("15d82959-2105-425c-b6c3-a24cd694b3ea"),
                            BreweryName = "Carlsberg",
                            Country = "Denmark"
                        },
                        new
                        {
                            BreweryID = new Guid("4fb47d6c-e110-48b5-b4ea-06a060ee5ee1"),
                            BreweryName = "Munich Brewery",
                            Country = "Germany"
                        },
                        new
                        {
                            BreweryID = new Guid("3babc6c6-8d55-4985-ae33-b1be0cd15408"),
                            BreweryName = "Delerium",
                            Country = "Belgium"
                        });
                });

            modelBuilder.Entity("ModelLibrary.RatingModel", b =>
                {
                    b.Property<Guid>("RatingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BeerID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RatingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("RatingImage")
                        .HasColumnType("bytea");

                    b.Property<double>("RatingScore")
                        .HasColumnType("double precision");

                    b.Property<string>("Review")
                        .HasColumnType("text");

                    b.Property<Guid>("TasterBeerLoverID")
                        .HasColumnType("uuid");

                    b.HasKey("RatingID");

                    b.HasIndex("BeerID");

                    b.HasIndex("TasterBeerLoverID");

                    b.ToTable("RATINGS");
                });

            modelBuilder.Entity("BeerGroupModelBeerLoverModel", b =>
                {
                    b.HasOne("ModelLibrary.BeerGroupModel", null)
                        .WithMany()
                        .HasForeignKey("BeerGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelLibrary.BeerLoverModel", null)
                        .WithMany()
                        .HasForeignKey("GroupMemberBeerLoverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModelLibrary.BeerModel", b =>
                {
                    b.HasOne("ModelLibrary.BeerLoverModel", null)
                        .WithMany("FavBeer")
                        .HasForeignKey("BeerLoverModelBeerLoverID");

                    b.HasOne("ModelLibrary.BreweryModel", "Brewery")
                        .WithMany("ProducedBeer")
                        .HasForeignKey("BreweryID");

                    b.Navigation("Brewery");
                });

            modelBuilder.Entity("ModelLibrary.BreweryModel", b =>
                {
                    b.HasOne("ModelLibrary.BeerLoverModel", null)
                        .WithMany("FavBrewery")
                        .HasForeignKey("BeerLoverModelBeerLoverID");
                });

            modelBuilder.Entity("ModelLibrary.RatingModel", b =>
                {
                    b.HasOne("ModelLibrary.BeerModel", "Beer")
                        .WithMany("Rating")
                        .HasForeignKey("BeerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelLibrary.BeerLoverModel", "Taster")
                        .WithMany("Rating")
                        .HasForeignKey("TasterBeerLoverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beer");

                    b.Navigation("Taster");
                });

            modelBuilder.Entity("ModelLibrary.BeerLoverModel", b =>
                {
                    b.Navigation("FavBeer");

                    b.Navigation("FavBrewery");

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("ModelLibrary.BeerModel", b =>
                {
                    b.Navigation("Rating");
                });

            modelBuilder.Entity("ModelLibrary.BreweryModel", b =>
                {
                    b.Navigation("ProducedBeer");
                });
#pragma warning restore 612, 618
        }
    }
}
